// app/build.gradle.kts (Kotlin DSL)

import java.util.Properties

plugins {
    id("com.android.application") // Apply the Android Application plugin
    id("org.jetbrains.kotlin.android") // Apply the Kotlin Android plugin
    // Add the Kotlin Kapt plugin for Room annotation processing
    id("kotlin-kapt")
}

// Secure release signing config using local.properties
val keystoreProperties = Properties().apply {
    val file = rootProject.file("local.properties")
    if (file.exists()) {
        file.inputStream().use { this.load(it) }
    }
}

android {
    // Defines the namespace for the R and BuildConfig classes generated by the build system.
    // This should match your base package name.
    namespace = "com.bookmarklocker"

    // Specifies the target Android SDK version.
    compileSdk = 34 // Or latest stable SDK

    // Default configuration for all product flavors.
    defaultConfig {
        // The unique application ID for your app. This is how the app is identified on Google Play.
        applicationId = "com.bookmarklocker"
        // The minimum Android SDK version your app supports.
        minSdk = 24
        // The target Android SDK version. Should usually be the same as compileSdk.
        targetSdk = 34 // Or latest stable SDK
        // Version code: A positive integer used as an internal version number.
        versionCode = 1
        versionName = "1.0"

        // Specifies the test instrumentation runner to use for Android tests.
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        create("release") {
            storeFile = file(keystoreProperties["RELEASE_STORE_FILE"] ?: "")
            storePassword = keystoreProperties["RELEASE_STORE_PASSWORD"] as String
            keyAlias = keystoreProperties["RELEASE_KEY_ALIAS"] as String
            keyPassword = keystoreProperties["RELEASE_KEY_PASSWORD"] as String
        }
    }

    // Configures build types (e.g., debug, release).
    buildTypes {
        getByName("release") {
            isMinifyEnabled = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            signingConfig = signingConfigs.getByName("release")
        }
    }
    // Configures Java compatibility options.
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    // Configures Kotlin specific options.
    kotlinOptions {
        jvmTarget = "1.8"
    }
    // Enables View Binding, which generates a binding class for each XML layout file.
    buildFeatures {
        viewBinding = true
    }
}

// Defines project dependencies.
dependencies {
    // Core KTX extensions for Kotlin.
    implementation("androidx.core:core-ktx:1.13.1")
    // AndroidX AppCompat library for backward compatibility.
    implementation("androidx.appcompat:appcompat:1.7.0")
    // Material Design components library by Google.
    implementation("com.google.android.material:material:1.12.0")
    // ConstraintLayout for flexible UI layouts.
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    // Navigation Component - Fragment KTX extensions.
    implementation("androidx.navigation:navigation-fragment-ktx:2.7.7")
    // Navigation Component - UI KTX extensions.
    implementation("androidx.navigation:navigation-ui-ktx:2.7.7")
    implementation("com.google.android.flexbox:flexbox:3.0.0")
    implementation("com.google.code.gson:gson:2.10.1")

    // Room components for local database persistence
    // Use the latest stable version for Room
    val room_version = "2.6.1" // Define Room version as a variable
    implementation("androidx.room:room-runtime:$room_version")
    // For Kotlin annotation processing (kapt)
    kapt("androidx.room:room-compiler:$room_version")
    // For Kotlin Coroutines support with Room
    implementation("androidx.room:room-ktx:$room_version")

    // Lifecycle components (ViewModel and LiveData)
    // IMPORTANT: Ensure this dependency is correctly added and resolved.
    val lifecycle_version = "2.8.3" // Define Lifecycle version as a variable
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version") // This line provides 'asLiveData'

    // Test dependencies
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
}
