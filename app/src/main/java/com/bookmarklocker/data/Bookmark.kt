package com.bookmarklocker.data

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.ForeignKey // Import ForeignKey
import androidx.room.PrimaryKey
import java.io.Serializable

/**
 * Bookmark: A data class representing a single bookmark entry in the database.
 * This class is annotated as a Room Entity, meaning it corresponds to a table in the database.
 * Each property (id, url, title, notes, timestamp) maps to a column in that table.
 *
 * Updated in Step 6 to include:
 * - `tags`: A list of strings for categorization (stored as JSON string via TypeConverter).
 * - `collectionId`: A foreign key linking this bookmark to a specific collection.
 * - Deletion rule for foreign key: If a parent collection is deleted, associated bookmarks are also deleted.
 *
 * @param id Unique identifier for the bookmark. Auto-generated by Room.
 * @param url The actual URL of the bookmark.
 * @param title A user-friendly title for the bookmark (optional).
 * @param notes Any additional notes or description for the bookmark (optional).
 * @param tags A list of tags associated with the bookmark (e.g., "work", "reading").
 * @param collectionId The ID of the collection this bookmark belongs to. Null if not in any collection.
 * @param timestamp The time when the bookmark was created, in milliseconds since epoch.
 */
@Entity(
    tableName = "bookmarks",
    foreignKeys = [ForeignKey(
        entity = Collection::class, // Refers to the Collection entity
        parentColumns = ["id"],     // Parent's primary key
        childColumns = ["collection_id"], // Child's foreign key column
        onDelete = ForeignKey.SET_NULL // If collection is deleted, set collection_id to NULL
        // onDelete = ForeignKey.CASCADE // Alternatively, if you want bookmarks to be deleted when collection is deleted
    )]
)
data class Bookmark(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,

    @ColumnInfo(name = "url")
    val url: String,

    @ColumnInfo(name = "title")
    val title: String?,

    @ColumnInfo(name = "notes")
    val notes: String?,

    @ColumnInfo(name = "tags") // Will be converted to/from JSON string by TypeConverter
    val tags: List<String> = emptyList(), // Default to empty list

    @ColumnInfo(name = "collection_id") // Foreign key column
    val collectionId: Int? = null, // Nullable, as a bookmark might not belong to any collection

    @ColumnInfo(name = "timestamp")
    val timestamp: Long = System.currentTimeMillis()
) : Serializable
